#!--PERL--
# alias_manager.pl -  this script is intended to create automatically list aliases
# when using sympa. Aliases can be added or removed in file --SENDMAIL_ALIASES--
# To use a different script, you should edit the 'alias_manager' sympa.conf parameter

# RCS Identication ; $Revision: 6556 $ ; $Date: 2010-06-21 18:01:01 +0200 (lun 21 jun 2010) $ 

# L. Marcotte has written a version of alias_manager.pl that is LDAP enabled
# check the contrib. page for more information :
# http://sympa.org/contrib.html

# Sympa - SYsteme de Multi-Postage Automatique
# Copyright (c) 1997, 1998, 1999, 2000, 2001 Comite Reseau des Universites
# Copyright (c) 1997,1998, 1999 Institut Pasteur & Christophe Wolfhugel
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

$ENV{'PATH'} = '';

## Load Sympa.conf
use strict;
use lib '--modulesdir--';
use Conf;
use POSIX;
use tools;
use tt2;
use Sympa::Constants;
use warnings;

use constant QMAIL_FOLDER => "~";
use constant SYMBA_BIN_FOLDER => "/home/swk/bin/sympa/bin";


my $sympa_conf_file = Sympa::Constants::CONFIG;
unless (Conf::load($sympa_conf_file)) {
   print STDERR "The configuration file $sympa_conf_file contains errors.\n";
   exit(1);
}
my $tmp_alias_file = $Conf{'tmpdir'}.'/sympa_aliases.'.time;


my $default_domain;
my $alias_wrapper       = Sympa::Constants::SBINDIR . '/aliaswrapper';
my $lock_file           = Sympa::Constants::EXPLDIR . '/alias_manager.lock';
my $path_to_queue       = Sympa::Constants::LIBEXECDIR . '/queue';
my $path_to_bouncequeue = Sympa::Constants::LIBEXECDIR .'/bouncequeue';

my ($operation, $listname, $domain, $file) = @ARGV;


if (($operation !~ /^(add|del)$/) || ($#ARGV < 2)) {
    printf STDERR "Usage: $0 <add|del> <listname> <robot> [<file>]\n";
    exit(2);
}

if ($operation eq 'add') {

  writeQmailFiles($listname);
# also use $domain?!
 
}elsif ($operation eq 'del') {

}else {
    print STDERR "Action $operation not implemented yet\n";
    exit(2);
}

exit 0;

sub writeQmailFiles {
    my ($listname) = @_;
    writeQMailSympaConfigFile("$listname", "queue $listname\@softwerkskammer.de");
    writeQMailSympaConfigFile("$listname-owner", "bouncequeue $listname\@softwerkskammer.de");
    writeQMailSympaConfigFile("$listname-request", "queue $listname-request\@softwerkskammer.de");
    writeQMailSympaConfigFile("$listname-unsubscribe", "queue $listname-unsubscribe\@softwerkskammer.de");
}
 
sub writeQMailSympaConfigFile {
    my ($qmailSuffix, $sympaCommand) = @_;
    writeToFile(QMAIL_FOLDER."/.qmail-$qmailSuffix", '| '.SYMBA_BIN_FOLDER."/$sympaCommand");
}
 
sub writeToFile {
    my ($fileName, $text) = @_;
    open (my $handle, '>', $fileName) or die "Failed to open '$fileName': $!";
    print $handle "$text\n";
    close ($handle) or die $!;
}
 
1;
